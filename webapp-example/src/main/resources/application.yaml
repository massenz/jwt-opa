# JWT / OPA Demo application configuration
#
# Created by M. Massenzio, 2020-11-22
#
# Default properties, some may be overridden by specifying
# an active profile with SPRINT_PROFILES_ACTIVE.
logging:
  level:
    com.alertavert: info

management:
  endpoints:
    web:
      exposure:
        include: "env, info, health"


# This is used to build the Rule validation endpoint:
#   /v1/data/com/alertavert/userauth/allow
#
# Note the package in the Rego source (jwt_auth.rego) uses dotted notation:
#   package com.alertavert.userauth
#
opa:
  policy: com/alertavert/userauth
  rule: allow

# List of request headers that will be submitted to OPA for policy evaluation.
# `Host` and `User-Agent` are always included.
#
# NOTE: this is a quirk of Spring Boot: configure this with a comma-separated list
#       NOT a YAML array, as that will NOT work as expected.
  headers: x-demoapp-auth, Accept-Encoding

db:
  server: localhost
  port: 27017
  name: opa-demo-db

  # Obviously, well, DON'T DO THIS for a real server.
  admin:
    username: admin
    password: 8535b9c4-a

# Just making the response JSON body a bit prettier.
spring:
  jackson:
    default-property-inclusion: "non_null"
---
# Main development profile, use this for dev/testing.
spring:
  config:
    activate:
      on-profile: dev

# Doing this only for debug builds, as it may leak sensitive information
# to an attacker.
server:
  error:
    include-message: always
  port: 8081

tokens:
  # The issuer is carried over in the API Token and can be used to determine the
  # application context, when resolving different policies.
  issuer: "demo-issuer"

  # By default, the Token expires after a full day (24-hour); change the following two
  # properties (the duration expressed in seconds) to adapt to your application
  # security requirements.
  should_expire: true
  # For the demo app, we make the API Token valid for 5 minutes.
  expires_after_sec: 3000

  # Interval in seconds, after creation, during which the JWT is not valid.
  # Corresponds to the `nbf` ("not before") claim.
  # By default it is 0 (i.e., immediately valid, it could be set to a value
  # larger than 0 to enforce a delay on using the token).
  not_before_delay_sec: 0

keys:
  # Signature algorithm
  #
  # Possible values are:
  # PASSPHRASE:  plaintext secret
  # EC: Elliptic Curve cryptography key pair
  algorithm: EC

  # Location for the signing secret
  #
  # Possible values for `location` are (with respective meaning for the `name` property):
  # only available for PASSPHRASE
  # env:      env var name which contains the signing secret
  # file:     the file whose contents are the plaintext secret (NOT secure)
  #
  # keypair:    the filename without extension, to which `.pem` and `.pub` will be added
  # awssecret:  name of AWS SecretsManager secret
  # vaultpath:  path in HashiCorp Vault
  #
  #       File paths can be absolute or relative.
  #       For a PASSPHRASE, the secret is simply read from SecretsManager/Vault
  #       The keypair is stored as a JSON-formatted secret, with two keys: "priv" and "pub".
  location: keypair
  name: private/ec-key

logging:
  level:
    com.alertavert: debug
    reactor.netty: warn
    org:
      springframework:
        security:
          web:
            authentication: debug

management:
  endpoints:
    web:
      exposure:
        include: "*"

# OPA Server running in a local container:
#    docker run -d --rm -p 8181:8181 --name opa openpolicyagent/opa run --server
opa:
  server: "localhost:8181"


routes:
  # These endpoints will be accessible without authentication
  allowed:
    - "/health"
    - "/demo"
    - "/favicon.ico"
    #- "/login/reset/*"

  # These will require the user to authenticate, but will not
  # be subject to OPA Policies authorization check.
  # By default, /login is already in the list, BUT would need to be
  # explicitly added (if needed), if you override the default routes.authenticated property:
  authenticated:
   - "/login"
   - "/swagger-ui"
   - "/swagger-ui/**"
   - "/swagger-resources/**"
   - "/v3/api-docs"
   - "/v3/api-docs/**"

# CORS Configuration
#
# See the SecurityConfiguration class for an example how to use this.
cors:
  allowed:
    - "http://*.example.com"
    - "http://*.alertavert.com:*"
    - "http://localhost:*"

---
# AWS Profile, uses SecretsManager for the secret passphrase.
spring:
  config:
    activate:
      on-profile: aws

# AWS Configuration
#
# The following is only really useful when connecting to LocalStack for local
# development.
# Remember to export AWS_PROFILE to configure a valid user profile
# and AWS credentials (~/.aws/credentials) if using actual AWS.
aws:
  region: us-west-2
  profile: default
  # Use this with a locally running instance of localstack, configured to port 4566
  endpoint: http://localhost:4566

# Prior to running the webapp, upload the secret with:
#     export AWS_REGION=us-west-2
#     export AWS_ENDPOINT=http://localhost:4566
#     aws --endpoint-url $AWS_ENDPOINT secretsmanager create-secret --name demo-secret \
#         --secret-string "astrong-secret-dce44st"
keys:
  algorithm: PASSPHRASE
  location: awssecret
  name: demo-secret

# To use a keypair instead, generate keys with keygen.sh, upload them with aws-upload-keys.sh
# (run those scripts with -h to see more details) and use:
#
# keys:
#   algorithm: EC
#   location: awssecret
#   name: demo-pair
---
# Example setting the signing secret via an env var
spring:
  config:
    activate:
      on-profile: env

# Prior to running this export JWT_SIGNING_ENV in the same shell.
keys:
  algorithm: PASSPHRASE
  location: env
  name: JWT_SIGNING_ENV
